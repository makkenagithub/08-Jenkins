
// This pipeline is to create vpc in AWS using jenkins pipeline
pipeline {
    // pre-build
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()       //to disable the pipeline running simultaneously
        ansiColor('xterm')     // This is to display colors in pipeline output. Ansi colors plugin to be installed in jenkins console
    }
    parameters {
        choice(name: 'CHOICE', choices: ['Apply', 'Destroy'], description: 'Action: terrafom apply or destroy')
        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }

    //build
    stages {
        stage('Terrafom init and paln stage') {
            steps {
                // the below code in withAWS function has access to aws console. We stored the aws access key in jenkins console, that ID we are passing here.
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 80-cdn
                        terrafom init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }
        stage('Terrafom apply or destroy') {
            
            // input {
            //     message "Should we continue to ${params.CHOICE}"
            //     ok "Yes, we should."
            // }
            
            steps {
                 withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                        sh """
                            cd 80-cdn
                            if [ ${params.CHOICE} == 'Apply' ]
                            then
                                terraform apply -auto-approve tfplan
                            elif if [ ${params.CHOICE} == 'Destroy' ]
                            then
                                terrafom destroy -auto-approve
                            fi
                        """
                }
            }
        }
        /* stage('Destroy') {
            when {
                expression { params.CHOICE == 'Destroy' }
            }
            parallel {
                stage('ECR') {
                    steps {
                        build job: '70-ecr', parameters: [string(name: 'CHOICE', value: "Destroy")], wait: false
                    }
                }
                stage('ALB') {
                    steps {
                        build job: '60-alb', parameters: [string(name: 'CHOICE', value: "Destroy")], wait: false
                    }
                }
                stage('EKS') {
                    steps {
                        build job: '40-eks', parameters: [string(name: 'CHOICE', value: "Destroy")], wait: true
                    }
                }
                stage('Bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'CHOICE', value: "Destroy")], wait: false
                    }
                }

            }
        } */
        stage('Destroy'){
            when {
                expression { params.CHOICE == 'Destroy' }
            }
            steps{
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    script {
                        def directories = ['80-cdn', '70-ecr', '50-alb', '40-acm', '30-eks', '25-rds', '20-bastion', '10-sg', '00-vpc']
                        for (dir in directories) {
                            echo "Destroying resources in directory: ${dir}"
                            sh """
                            cd ${dir}
                            terraform init -reconfigure
                            terraform destroy -auto-approve || { echo "Failed to destroy resources in ${dir}"; exit 1; }
                            cd ..
                            """
                        }
            }
                }
            }
        }
        /* stage('Sequential') {
            when {
                expression { params.CHOICE == 'Destroy' }
            }
            stages {
                
                stage('ACM') {
                    steps {
                        build job: '40-acm', parameters: [string(name: 'CHOICE', value: "Destroy")], wait: false
                    }
                }
                stage('SG-Destroy'){
                    steps {
                        build job: '10-sg', parameters: [string(name: 'CHOICE', value: "Destroy")], wait: true
                    }
                }
                stage('VPC-Destroy'){
                    steps {
                        build job: '00-vpc', parameters: [string(name: 'CHOICE', value: "Destroy")], wait: false
                    }
                }
            }
                
        } */

    }
    //post build
    post {
        always {
            echo "this section runs always"
            deleteDir()
        }
        success {
            echo " this section runs only when success of pipeline"
        }
        failure {
            echo "this runs when failure of pipeline"
        }
    }
}