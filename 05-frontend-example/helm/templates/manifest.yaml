apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: expense
  labels:
    app: frontend
    tier: web
    project: expense
spec:
  replicas: 2
  selector:
    matchLabels:    # databases we usually do using statefull sets.
      app: frontend
      tier: web
      project: expense
  template:
    metadata:
      labels:
        app: frontend
        tier: web
        project: expense
    spec:
      containers:
      - name: frontend
        image: "{{ .Values.deployment.imageURL }}:{{ .Values.deployment.imageVersion }}"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          # limits should be >= requests
          limits:
            cpu: 100m
            memory: 128Mi

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: expense
spec:
  type: LoadBalancer    # frontend needs to be exposed to outside world. So service type is LoadBalancer
  selector:
    app: frontend
    tier: web
    project: expense
  ports:
  - name: frontend-port
    port: 80  # this is service port
    protocol: TCP
    targetPort: 8080  # this is container port. We can give name also here, but that name to be defined in pod container ports


---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-frontend
  namespace: expense
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend-deployment
  minReplicas: 1    # eventhough we mentioned 2 replicas in deployemnt, if the traffic is less, then it maintaines 1 replica
  maxReplicas: 10
  targetCPUUtilizationPercentage: {{ .Values.hpa.cpuUtiliZation}}  # usually 75% used in realtime
# Notice that the targetCPUUtilizationPercentage field has been replaced with an array called metrics